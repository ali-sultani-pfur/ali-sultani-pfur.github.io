<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Публикации | My Site</title>
    <link>https://ali-sultani-pfur.github.io/en/publication/</link>
      <atom:link href="https://ali-sultani-pfur.github.io/en/publication/index.xml" rel="self" type="application/rss+xml" />
    <description>Публикации</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Sun, 31 Aug 2025 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://ali-sultani-pfur.github.io/media/icon_hu_645fa481986063ef.png</url>
      <title>Публикации</title>
      <link>https://ali-sultani-pfur.github.io/en/publication/</link>
    </image>
    
    <item>
      <title>Why It’s Important to Study Algorithms</title>
      <link>https://ali-sultani-pfur.github.io/en/publication/05/</link>
      <pubDate>Sun, 31 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://ali-sultani-pfur.github.io/en/publication/05/</guid>
      <description>&lt;h1 id=&#34;-why-its-important-to-study-algorithms&#34;&gt;🤖 Why It’s Important to Study Algorithms&lt;/h1&gt;
&lt;p&gt;Algorithms are not just the “scary” part of a computer science course. They are the foundation of effective programming. Without them, you can still write code — but you won’t be able to write &lt;strong&gt;fast, scalable, and reliable&lt;/strong&gt; code.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-what-do-algorithms-give-you&#34;&gt;🧩 What do algorithms give you?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Optimization&lt;/strong&gt;&lt;br&gt;
A good algorithm can speed up a task by orders of magnitude. Why wait 10 seconds if you can get the result in 0.1?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Versatility&lt;/strong&gt;&lt;br&gt;
Understanding algorithms helps solve problems across many domains — from graph processing to image recognition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Career growth&lt;/strong&gt;&lt;br&gt;
Algorithms are at the core of technical interviews in major IT companies. Knowledge of theory + practice = confidence at interviews.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-what-should-you-study&#34;&gt;📚 What should you study?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sorting and searching&lt;/li&gt;
&lt;li&gt;Recursion and dynamic programming&lt;/li&gt;
&lt;li&gt;Graph algorithms (DFS, BFS, Dijkstra, A*)&lt;/li&gt;
&lt;li&gt;Data structures: lists, trees, hash tables, heaps&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-conclusion&#34;&gt;🚀 Conclusion&lt;/h2&gt;
&lt;p&gt;Algorithms are the language computers “think” in. The better you understand this language, the stronger you become as a developer. It’s not about memorization — it’s about &lt;strong&gt;thinking and structured problem-solving&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Study them, practice them, visualize them — and your code will become much better!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scientific Programming</title>
      <link>https://ali-sultani-pfur.github.io/en/publication/04/</link>
      <pubDate>Thu, 28 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://ali-sultani-pfur.github.io/en/publication/04/</guid>
      <description>&lt;h2 id=&#34;-scientific-programming-languages-worth-knowing&#34;&gt;🧠 Scientific Programming: Languages Worth Knowing&lt;/h2&gt;
&lt;p&gt;Scientific programming is not about flashy UIs or design. It’s about computation, optimization, data processing, and scalability. From a Computer Science perspective, I’d highlight several languages, each worth attention.&lt;/p&gt;
&lt;h3 id=&#34;-python--the-undisputed-leader&#34;&gt;🐍 Python — the undisputed leader&lt;/h3&gt;
&lt;p&gt;Python has become the de facto standard in the scientific community. It’s convenient, readable, and highly extensible. NumPy, SciPy, Pandas, Matplotlib, TensorFlow, PyTorch — all of these make it a universal tool for data analysis, machine learning, and mathematical modeling. Plus — a huge user base and extensive documentation.&lt;/p&gt;
&lt;h3 id=&#34;-matlab--powerful-but-limited&#34;&gt;🧮 MATLAB — powerful but limited&lt;/h3&gt;
&lt;p&gt;MATLAB is still widely used in engineering and scientific environments, especially in universities. Its main advantage is matrix power and built-in functions. The downside — a closed ecosystem and licensing. Still, for beginners and for visualization, it’s a solid option.&lt;/p&gt;
&lt;h3 id=&#34;-cc--when-you-need-speed&#34;&gt;⚙️ C/C++ — when you need speed&lt;/h3&gt;
&lt;p&gt;If maximum performance is required, C or C++ is the go-to choice. For numerical calculations, real-time simulations, GPU work — it’s almost a must-have. The learning curve isn’t the easiest, but it gives an understanding of what happens “at the hardware level.”&lt;/p&gt;
&lt;h3 id=&#34;-julia--fresh-and-promising&#34;&gt;🚀 Julia — fresh and promising&lt;/h3&gt;
&lt;p&gt;Julia positions itself as a fast language for scientific computing. Indeed, its syntax is pleasant, performance is close to C, and parallel computing support is built-in. However, the community is still small, and some library support remains limited.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-conclusion&#34;&gt;🔎 Conclusion&lt;/h3&gt;
&lt;p&gt;If you’re in computer science and plan to work with data, modeling, or research tasks — here’s my advice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt; — for starting out and for most tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C++&lt;/strong&gt; — to understand low-level optimization.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Julia or Rust&lt;/strong&gt; — if you want something modern and a bit different.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The ability to choose the right language for the task is a skill that pays off. Scientific programming isn’t about picking one “favorite” language — it’s about adaptability and making smart use of the tools available.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Make a Scientific Presentation</title>
      <link>https://ali-sultani-pfur.github.io/en/publication/03/</link>
      <pubDate>Sun, 24 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://ali-sultani-pfur.github.io/en/publication/03/</guid>
      <description>&lt;h1 id=&#34;-guide-how-to-make-a-proper-scientific-presentation-not-just-a-set-of-slides&#34;&gt;🧑‍💻 Guide: How to Make a Proper Scientific Presentation (Not Just a Set of Slides)&lt;/h1&gt;
&lt;p&gt;If your task is to prepare a &lt;strong&gt;scientific presentation&lt;/strong&gt; — for a class, project defense, or a conference — simply copying text from your report into PowerPoint no longer works.&lt;/p&gt;
&lt;p&gt;Here’s a simple yet effective framework that will help you stay within the time limit and convey your message clearly.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-1-presentation-structure&#34;&gt;🧱 1. Presentation Structure&lt;/h2&gt;
&lt;h3 id=&#34;-slide-1--title&#34;&gt;🔹 Slide 1 — Title&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Title of the work (the shorter and clearer, the better).&lt;/li&gt;
&lt;li&gt;Name, program, supervisor (if required).&lt;/li&gt;
&lt;li&gt;Date/event (e.g., “IT Department Conference,” “Project Pre-defense”).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-slide-2--relevance&#34;&gt;🔹 Slide 2 — Relevance&lt;/h3&gt;
&lt;p&gt;Why is the topic important? Where is it applied? What problems does it solve? One slide — max two short paragraphs + an illustration/diagram.&lt;/p&gt;
&lt;h3 id=&#34;-slide-3--aim-and-objectives&#34;&gt;🔹 Slide 3 — Aim and Objectives&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clearly state: &lt;em&gt;“The aim is to develop…”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;And list objectives: &lt;em&gt;“1. Research…, 2. Implement…, 3. Test…”&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-slides-46--main-part&#34;&gt;🔹 Slides 4–6 — Main Part&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Briefly about methods, algorithms, architecture.&lt;/li&gt;
&lt;li&gt;Add a diagram or code snippet (don’t overload with text).&lt;/li&gt;
&lt;li&gt;Show &lt;strong&gt;what you did&lt;/strong&gt;, not only what you &lt;em&gt;read about&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-slides-78--results&#34;&gt;🔹 Slides 7–8 — Results&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Tables, graphs, screenshots.&lt;/li&gt;
&lt;li&gt;Short analysis: what worked, what advantages you achieved.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-final-slide--conclusions&#34;&gt;🔹 Final Slide — Conclusions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;What was achieved?&lt;/li&gt;
&lt;li&gt;What are the limitations?&lt;/li&gt;
&lt;li&gt;What can be improved in the future?&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-2-design-minimalism-wins&#34;&gt;🛠 2. Design: Minimalism Wins&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Color palette&lt;/strong&gt; — 2–3 colors, avoid too much variety.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Font&lt;/strong&gt; — readable (no smaller than 18 pt).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Graphics&lt;/strong&gt; — diagrams and visuals are better than plain text.&lt;/li&gt;
&lt;li&gt;Don’t fear whitespace — less text, more clarity.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-3-content--copy-paste&#34;&gt;💡 3. Content ≠ Copy-Paste&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Don’t paste paragraphs from the report. Reframe them as short bullet points.&lt;/li&gt;
&lt;li&gt;One slide = one idea. No overload.&lt;/li&gt;
&lt;li&gt;Visualize data: charts are better than tables.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-4-presentation-tips&#34;&gt;🗣 4. Presentation Tips&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Rehearse at least once. With a timer.&lt;/li&gt;
&lt;li&gt;Speak in your own words, don’t read from the screen.&lt;/li&gt;
&lt;li&gt;Know what’s on each slide and why it’s there.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-conclusion&#34;&gt;✅ Conclusion&lt;/h2&gt;
&lt;p&gt;A good scientific presentation makes it clear &lt;strong&gt;what you did, why, and how it works&lt;/strong&gt;. Everything else — style, graphics, special effects — is secondary.&lt;/p&gt;
&lt;p&gt;First comes logic, then design. This rule always works.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Markup Languages. Introduction to LaTeX</title>
      <link>https://ali-sultani-pfur.github.io/en/publication/02/</link>
      <pubDate>Fri, 22 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://ali-sultani-pfur.github.io/en/publication/02/</guid>
      <description>&lt;h1 id=&#34;markup-languages-introduction-to-latex&#34;&gt;Markup Languages. Introduction to LaTeX&lt;/h1&gt;
&lt;h2 id=&#34;what-are-markup-languages&#34;&gt;What are markup languages?&lt;/h2&gt;
&lt;p&gt;Markup languages are designed to structure and format text. They are used in web development, technical documentation, scientific papers, and even in everyday notes.&lt;/p&gt;
&lt;p&gt;Some popular markup languages include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTML&lt;/strong&gt; — the foundation of web pages, enabling the creation of structured documents with multimedia content.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; — a simple and lightweight language for documentation, blogs, and notes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LaTeX&lt;/strong&gt; — a powerful typesetting system, especially popular among scientists and engineers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-makes-latex-special&#34;&gt;What makes LaTeX special?&lt;/h2&gt;
&lt;p&gt;LaTeX is not just a markup language but a full-fledged document preparation system. Unlike regular text editors, it uses a declarative approach: the author defines the structure of the document, and LaTeX takes care of formatting it properly.&lt;/p&gt;
&lt;p&gt;Key advantages of LaTeX:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Professional typography&lt;/strong&gt;. Documents look polished without extra effort.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Advanced handling of mathematical formulas&lt;/strong&gt;. This makes it the standard in the scientific community.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexibility and modularity&lt;/strong&gt;. Packages can be used to extend functionality.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated formatting&lt;/strong&gt;. Headings, lists, bibliographies, references, and tables of contents are generated automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;where-is-latex-used&#34;&gt;Where is LaTeX used?&lt;/h2&gt;
&lt;p&gt;LaTeX is widely applied in scientific and technical fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writing theses and coursework.&lt;/li&gt;
&lt;li&gt;Preparing scientific articles and books.&lt;/li&gt;
&lt;li&gt;Creating technical documentation and presentations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although LaTeX requires time to learn, its capabilities make it an indispensable tool for working with text where precision and high-quality typesetting are essential.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Version Control</title>
      <link>https://ali-sultani-pfur.github.io/en/publication/01/</link>
      <pubDate>Wed, 20 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://ali-sultani-pfur.github.io/en/publication/01/</guid>
      <description>&lt;h1 id=&#34;-version-control-git&#34;&gt;🔄 Version Control. Git&lt;/h1&gt;
&lt;h2 id=&#34;what-is-version-control&#34;&gt;What is version control?&lt;/h2&gt;
&lt;p&gt;Version control is the process of tracking and managing changes in code. This is especially important for teamwork, when multiple developers are making edits to the same project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why is it important?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;✅ Allows you to roll back to a previous version of the code&lt;/li&gt;
&lt;li&gt;✅ Helps track changes and their authors&lt;/li&gt;
&lt;li&gt;✅ Simplifies collaborative development&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git--the-main-version-control-tool&#34;&gt;Git – the main version control tool&lt;/h2&gt;
&lt;p&gt;Git is the most popular distributed version control system (VCS). It is used by developers worldwide and forms the backbone of platforms like GitHub, GitLab, and Bitbucket.&lt;/p&gt;
&lt;h3 id=&#34;-core-principles-of-git&#34;&gt;🔹 Core principles of Git&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Local and remote repositories&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git stores all changes in a &lt;strong&gt;local repository&lt;/strong&gt; on your computer.&lt;/li&gt;
&lt;li&gt;The repository can be synchronized with a &lt;strong&gt;remote server&lt;/strong&gt;, such as GitHub.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Commits and change history&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;commit&lt;/strong&gt; is saving changes to the project’s history.&lt;/li&gt;
&lt;li&gt;Each commit has a unique &lt;strong&gt;hash&lt;/strong&gt; (identifier), making it easy to track modifications.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Branching and merging&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git allows you to create &lt;strong&gt;branches&lt;/strong&gt; to work on new features without breaking the main code.&lt;/li&gt;
&lt;li&gt;Once the work is done, the branch can be &lt;strong&gt;merged&lt;/strong&gt; into the main one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Conflict resolution&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If two developers edit the same file, a &lt;strong&gt;conflict&lt;/strong&gt; may occur.&lt;/li&gt;
&lt;li&gt;Git lets you manually choose which changes to keep.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Team collaboration&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Developers make changes in &lt;strong&gt;their own branches&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;After code review, changes are &lt;strong&gt;merged&lt;/strong&gt; into the main branch.&lt;/li&gt;
&lt;li&gt;This prevents chaos in the code and makes quality control easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;why-is-git-better-than-just-copying-files&#34;&gt;Why is Git better than just copying files?&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Storage method&lt;/th&gt;
          &lt;th&gt;Version control&lt;/th&gt;
          &lt;th&gt;Rollback option&lt;/th&gt;
          &lt;th&gt;Team collaboration&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Simple file copying&lt;/td&gt;
          &lt;td&gt;❌ No&lt;/td&gt;
          &lt;td&gt;❌ No&lt;/td&gt;
          &lt;td&gt;❌ No&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Git&lt;/td&gt;
          &lt;td&gt;✅ Yes&lt;/td&gt;
          &lt;td&gt;✅ Yes&lt;/td&gt;
          &lt;td&gt;✅ Yes&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Git is a powerful tool for version control. If you are developing software, learning Git is an essential skill!&lt;/p&gt;
&lt;p&gt;🚀 How do you use Git? Share in the comments!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
